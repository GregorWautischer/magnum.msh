#!/usr/bin/python

# Copyright (C) 2011-2015 Florian Bruckner
#
# This file is part of magnum.msh.
#
# magnum.msh is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# magnum.msh is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with magnum.msh. If not, see <http://www.gnu.org/licenses/>.
#
# Last modified by Florian Bruckner, 2015-10-14

from dolfin import *
import numpy as np

class MeshTool(object):
  def __init__(self):
    self._mesh = Mesh()
    pass

  def add(self, newmesh, domain=None): 
    editor = MeshEditor()
    origmesh = self._mesh
    mesh = Mesh()
    N = origmesh.num_vertices()
    NE = origmesh.num_cells()
    editor.open(mesh, 3, 3)
    editor.init_vertices(N+newmesh.num_vertices())
    editor.init_cells(NE+newmesh.num_cells())
    map(lambda n, x: editor.add_vertex(n, x), np.arange(N), origmesh.coordinates())
    map(lambda n, x: editor.add_vertex(N+n, x), np.arange(newmesh.num_vertices()), newmesh.coordinates())

    #map(lambda n, c: editor.add_cell(n, c), np.arange(NE), origmesh.cells())
    for n in np.arange(NE):
      editor.add_cell(n, np.array(origmesh.cells()[n,:], dtype=np.uintp))

    #map(lambda n, c: editor.add_cell(NE+n, np.array(c, dtype=np.uintp)), np.arange(newmesh.num_cells()), newmesh.cells())
    for n in np.arange(newmesh.num_cells()):
      editor.add_cell(NE+n, np.array(newmesh.cells()[n,:]+N, dtype=np.uintp))
    editor.close()
    self._mesh = mesh
    

  def scale(self, s):
    """
    Scale mesh by given scalar or vector

    *Arguments*
      scaling factor (:class:`float` or :class:`tuple`)
    """
    self.coordinates()[:,:]*np.array(s) 

  def mesh(self):
    return self._mesh
