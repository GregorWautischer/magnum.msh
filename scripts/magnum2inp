#!/usr/bin/python

# Copyright (C) 2011-2015 Florian Bruckner
#
# This file is part of magnum.msh.
#
# magnum.msh is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# magnum.msh is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with magnum.msh. If not, see <http://www.gnu.org/licenses/>.
#
# Last modified by Florian Bruckner, 2015-10-13

import argparse
from dolfin import *
import numpy as np
from StringIO import StringIO

class INPWriter(object):
  def __init__(self, filename):
    self._mesh = Mesh(filename)
    self._domains = MeshFunction('size_t', self._mesh, 3, self._mesh.domains())

  def write_inp(self, filename):
    with open(filename, "w") as f:
      # NNodes, NElements, NodeData, ElementData, TensorData
      N = self._mesh.num_vertices()
      NE = self._mesh.num_cells()
      f.write("%d %d %d %d %d\n" % (N, NE, 0, 0, 0))
      nodes = np.hstack((np.arange(1,N+1).reshape(N,1), self._mesh.coordinates()))
      np.savetxt(f, nodes, fmt="%8d %.15e %.15e %.15e")
      if self._mesh.domains().num_marked(3) != 0:
        self._mat = self._domains.array()
      else:
        self._mat = np.repeat(1, NE)
      elements = np.hstack((np.arange(1,NE+1).reshape(NE,1), self._mat.reshape(NE,1), self._mesh.cells()+1))
      np.savetxt(f, elements, fmt="%8d %4d tet %8d %8d %8d %8d")

  def print_stats(self):
    print "Found Mesh:"
    print "  Nodes:     %-10d" % self._mesh.num_vertices()
    print "  Elements:  %-10d" % self._mesh.num_cells()
    print "  Materials: %-10d" % len(np.unique(self._mat))
    #print "  Node Data: %-10d" % (self.node_data.shape[1]-1)


if __name__ == "__main__":
  parser = argparse.ArgumentParser(prog='magnum-msh')
  parser.add_argument('source', help='Input XML file')
  parser.add_argument('target', help='Output INP file')
  args = parser.parse_args()

  writer = INPWriter(args.source)
  # TODO: implement read_data(field_file)
  writer.write_inp(args.target)
  writer.print_stats()





